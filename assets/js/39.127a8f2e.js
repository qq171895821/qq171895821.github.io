(window.webpackJsonp=window.webpackJsonp||[]).push([[39],{630:function(n,v,_){"use strict";_.r(v);var t=_(0),s=Object(t.a)({},(function(){var n=this,v=n.$createElement,_=n._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[_("div",{staticClass:"custom-block tip"},[_("p",[n._v("什么是时间复杂度")])]),n._v(" "),_("h2",{attrs:{id:"什么是时间复杂度"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#什么是时间复杂度"}},[n._v("#")]),n._v(" 什么是时间复杂度")]),n._v(" "),_("p",[_("strong",[n._v("「时间复杂度是一个函数，它定性描述该算法的运行时间」")])]),n._v(" "),_("p",[n._v("我们在软件开发中，时间复杂度就是用来方便开发者估算出程序运行的答题时间。")]),n._v(" "),_("p",[n._v("那么该如何估计程序的运行时间呢，通常会估算算法的操作单元的数量来代表程序消耗的时间，这里默认CPU的每个单元运行消耗的时间都是相同的。")]),n._v(" "),_("p",[n._v("假设算法的问题规模为n，那么操作单元数量便用函数f(n)来表示，随着数据规模n的增大，算法执行时间的增长率和f(n)的增长率相同，这称作为算法的渐进时间复杂度，简称时间复杂度，记为O(f(n))")]),n._v(" "),_("h2",{attrs:{id:"什么是大o"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#什么是大o"}},[n._v("#")]),n._v(" 什么是大O")]),n._v(" "),_("p",[n._v("这里的大O指什么呢，说到时间复杂度，"),_("strong",[n._v("「大家都知道O(n)，O(n^2)，却说不清什么是大O」")]),n._v("。")]),n._v(" "),_("p",[n._v("算法导论给出的解释："),_("strong",[n._v("「大O用来表示上界的」")]),n._v("，当用它作为算法的最坏情况运行时间上界，就是对任意数据输入的运行时间的上界。")]),n._v(" "),_("p",[n._v("同样算法导论给出了例子：拿插入排序来说，插入排序的时间复杂度我们都说是O(n^2)。")]),n._v(" "),_("p",[n._v("输入数据的形式对程序运算时间是有很大影响的，在数据本来有序的情况下时间复杂度是O(n)，但如果数据是逆序的化，插入排序的时间复杂度就是O(n^2)，也就对于所有输入情况来说，最坏是O(n^2)的时间复杂度，所以称插入排序的时间复杂度为O(n^2)。")]),n._v(" "),_("p",[n._v("同样的同理在看一下快速排序，都知道快速排序是O(nlogn)，但是当数据已经有序的情况下，快速排序的时间复杂度是O(n^2)的，"),_("strong",[n._v("「所以严格从大O的定义来讲，快速排序的时间复杂度应该是O(n^2)」")]),n._v("。")]),n._v(" "),_("p",[_("strong",[n._v("「但是我们依然说快速排序是O(nlogn)的时间复杂度，这个就是业内的一个默认规定，这里说的O代表的就是一般情况，而不是严格的上界」")]),n._v("。如图所示：")]),n._v(" "),_("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/qq171895821/Jymscloudiimmgg@main/img/timecp1.png"}}),n._v(" "),_("p",[n._v("我们主要关心的还是一般情况下的数据形式。")]),n._v(" "),_("p",[_("strong",[n._v("「面时中说到算法的时间复杂度是多少指得都是一般情况」")]),n._v("。但是如果面试官和我们深入讨论一个算法的实现以及性能的时候，就要时刻想着数据用例的不一样，时间复杂度也是不同的，这一点是一定要注意的。")]),n._v(" "),_("h2",{attrs:{id:"不同数据规模的差异"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#不同数据规模的差异"}},[n._v("#")]),n._v(" 不同数据规模的差异")]),n._v(" "),_("p",[n._v("如下图中可以看出不同算法的时间复杂度在不同数据输入规模下的差异。")]),n._v(" "),_("p",[_("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/qq171895821/Jymscloudiimmgg@main/img/timecp2.png",alt:"时间复杂度，不同数据规模的差异"}})]),n._v(" "),_("p",[n._v("在决定使用哪些算法的时候，不是时间复杂度越低越好（因为简化后的时间复杂度忽略了常数项等），要考虑数据规模，如果数据规模很小甚至可以用O(n^2)的算法比O(n)的更合适（在有常数项的时候）。")]),n._v(" "),_("p",[n._v("就像上图中O(5n^2)和O(100n)在n为20之前，很明显前者是更优的，所花费的时间也是最少的。")]),n._v(" "),_("p",[n._v("那为什么在计算时间复杂度的时候要忽略常数项系数呢，也就说O(100n)就是O(n)的时间复杂度，O(5n^2)就是O(n^2)的时间复杂度，而且要默认O(n)优于O(n^2)呢？")]),n._v(" "),_("p",[n._v("这里就又设计到大O的定义，"),_("strong",[n._v("「因为大O就是数据量级突破一个点且数据量非常大的情况下所表现出的时间复杂度，这个数据量也就是常数项系数已经不起决定性作用的数据量」")]),n._v("。")]),n._v(" "),_("p",[n._v("例如上图中20就是那个的点，n只要大于20常数项系数已经不起决定性作用了。")]),n._v(" "),_("p",[_("strong",[n._v("「所以我们说的时间复杂度都是省略常数项系数的，是因为一般情况下都是默认数据规模足够的大，基于这样的事实，给出的算法时间复杂度的一个排行如下所示」")]),n._v("：")]),n._v(" "),_("p",[n._v("O(1)常数阶 < O(logn)对数阶 < O(n)线性阶 < O(n^2)平方阶 < O(n^3)(立方阶) < O(2^n) (指数阶)")]),n._v(" "),_("p",[n._v("但是也要注意大常数，如果这个常数非常大，例如10^7，10^9，那么常数就是不得不考虑的因素了。")]),n._v(" "),_("h2",{attrs:{id:"复杂表达式的简化"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#复杂表达式的简化"}},[n._v("#")]),n._v(" 复杂表达式的简化")]),n._v(" "),_("p",[n._v("有时候我们去计算时间复杂度的时候发现不是一个简单的O(n)或者O(n^2)，而是一个复杂的表达式，例如：")]),n._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[n._v("O(2*n^2 + 10*n + 1000) \n")])])]),_("p",[n._v("那这里如何描述这个算法的时间复杂度呢，一种方法就是简化发。")]),n._v(" "),_("p",[n._v("去掉运行时间中的加法常数项（因为常数项并不会因为n的增大而增加计算机的操作次数）。")]),n._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[n._v("O(2*n^2 + 10*n)\n")])])]),_("p",[n._v("去掉常数项系数（上文已经详细讲过为什么可以去掉常数项的原因）。")]),n._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[n._v("O(n^2 + n)\n")])])]),_("p",[n._v("只保留最高项，去掉数量级小一级的n（因为n^2的数据规模远大于n），最终简化为：")]),n._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[n._v("O(n^2)\n")])])]),_("p",[n._v("如果这一步理解有困难，那也可以做提取n的操作，变成O(n(n+1))，省略加法常数项后也就变成了：")]),n._v(" "),_("div",{staticClass:"language- extra-class"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[n._v("O(n^2)\n")])])]),_("p",[n._v("所以最后我们说：这个算法的算法时间复杂度是O(n^2) 。")]),n._v(" "),_("p",[n._v("也可以用另一种简化的思路，其实当n大于40的时候， 这个复杂度会恒小于O(3 * n^2)， O(2 * n^2 + 10 * n + 1000)  < O(3 * n^2)，所以说最后省略掉常数项系数最终时间复杂度也是O(n^2)。")]),n._v(" "),_("h2",{attrs:{id:"o-logn-中的log是以什么为底"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#o-logn-中的log是以什么为底"}},[n._v("#")]),n._v(" O(logn)中的log是以什么为底？")]),n._v(" "),_("p",[n._v("平时说的这个算法的时间复杂度是logn的，那么一定是log以2为底n的对数么？")]),n._v(" "),_("p",[n._v("其实不然，也可以是以10为底的n的对数，也可以是以20为底n的对数，"),_("strong",[n._v("「但我们统一说logn，也就是忽略底数的描述」")]),n._v("。")]),n._v(" "),_("p",[n._v("为什么可以这么做呢？如下图所示：")]),n._v(" "),_("p",[_("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/qq171895821/Jymscloudiimmgg@main/img/timecp3.png",alt:""}})]),n._v(" "),_("p",[n._v("假如有两个算法的时间复杂度，分别是log以2为底n的对数和log以10为底n的对数，那么这里如果还记得高中数学的话，应该不能理解"),_("code",[n._v("以2为底n的对数 = 以2为底10的对数 * 以10为底n的对数")]),n._v("。")]),n._v(" "),_("p",[n._v("而以2为底10的对数是一个常数，在上文已经讲述了我们计算时间复杂度是忽略常数的。")]),n._v(" "),_("p",[n._v("抽象一下就是在时间复杂度的计算过程中，log以i为底n的对数等于log 以j为底n的对数，所以忽略了i，直接说是logn。")]),n._v(" "),_("p",[n._v("这样就应该不难理解为什么忽略底数了。")]),n._v(" "),_("h2",{attrs:{id:"举个例子"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#举个例子"}},[n._v("#")]),n._v(" 举个例子")]),n._v(" "),_("p",[n._v("通过这道面试题目，来分析一下时间复杂度。题目描述：找出n个字符串中相同的两个字符串（假设这里只有两个相同的字符串）。")]),n._v(" "),_("p",[n._v("如果是暴力枚举的话，时间复杂度是多少呢，是O(n^2)么？")]),n._v(" "),_("p",[n._v("这里一些同学会忽略了字符串比较的时间消耗，这里并不像int 型数字做比较那么简单，除了n^2 次的遍历次数外，字符串比较依然要消耗m次操作（m也就是字母串的长度），所以时间复杂度是O(m * n * n)。")]),n._v(" "),_("p",[n._v("接下来再想一下其他解题思路。")]),n._v(" "),_("p",[n._v("先排对n个字符串按字典序来排序，排序后n个字符串就是有序的，意味着两个相同的字符串就是挨在一起，然后在遍历一遍n个字符串，这样就找到两个相同的字符串了。")]),n._v(" "),_("p",[n._v("那看看这种算法的时间复杂度，快速排序时间复杂度为O(nlogn)，依然要考虑字符串的长度是m，那么快速排序每次的比较都要有m次的字符比较的操作，就是O(m * n * logn)  。")]),n._v(" "),_("p",[n._v("之后还要遍历一遍这n个字符串找出两个相同的字符串，别忘了遍历的时候依然要比较字符串，所以总共的时间复杂度是 O(m * n * logn + n * m)。")]),n._v(" "),_("p",[n._v("我们对O(m * n * logn + n * m) 进行简化操作，把m * n提取出来变成 O(m * n * (logn + 1))，再省略常数项最后的时间复杂度是 O(m * n * logn)。")]),n._v(" "),_("p",[n._v("最后很明显O(m * n * logn) 要优于O(m * n * n)！")]),n._v(" "),_("p",[n._v("所以先把字符串集合排序再遍历一遍找到两个相同字符串的方法要比直接暴力枚举的方式更快。")]),n._v(" "),_("p",[n._v("这就是我们通过分析两种算法的时间复杂度得来的。")]),n._v(" "),_("p",[_("strong",[n._v("「当然这不是这道题目的最优解，我仅仅是用这道题目来讲解一下时间复杂度」")]),n._v("。")])])}),[],!1,null,null,null);v.default=s.exports}}]);